gopher.txt: plugin for the Go programming language

==============================================================================
INTRODUCTION                                                          *gopher*

gopher.vim is a Vim plugin for the Go programming language.

This plugin requires Go 1.11 or newer; older versions will not work as the
internal vendoring uses modules.

Note: see the README for some information to get started; this is only a
reference.

==============================================================================
MOTIONS                                                       *gopher-motions*

                                                     *gopher-v_]]* *gopher-]]*
]]                      [count] top-level declarations forward.
                        A top-level declaration is a `func`, `type`, `var`,
                        `const`, or `import`.

                        In |ft-gopresent| files it jumps [count] sections
                        forward.

                                                     *gopher-v_[[* *gopher-[[*
[[                      [count] top-level declarations backwards. In
                        |ft-gopresent| it jumps [count] sections backwards.

==============================================================================
TEXT OBJECTS                                             *gopher-text-objects*

                                                     *gopher-v_af* *gopher-af*
af                      "a function", select the complete function body and
                        any preceding documentation comment (if any).

                                                     *gopher-v_if* *gopher-if*
if                      "inner function", select the contents of a function,
                        but not the function signature.

                                                     *gopher-v_ac* *gopher-ac*
ac                      "a comment", select the entire comment, including the
                        comment characters themselves.

                                                     *gopher-v_ic* *gopher-ic*
ic                      "inner comment", select the content of the function
                        but exclude the start and end markers.

==============================================================================
MAPPINGS                                                     *gopher-mappings*

Settings for mappings:

*g:gopher_map_prefix* = `;`
        Prefix all mappings with a key; the default is `;`, which is what the
        documentation assumes. For example to map to `<Leader>i`: >
                let g:gopher_map_prefix = '<Leader>'
<
*g:gopher_map_disabled* = `0`
        Disable mapping any of the below. You can choose your own mappings in
        your vimrc using the |<Plug>| maps: >
                nmap <Leader>x <Plug>(gopher-if)
<
The actual mappings:

                                                     *(gopher-if)* *gopher-;i*
;i                      Toggle between single-line and normal if checks. For
                        example these: >
                                err := e()
                                if err != nil {

                                _, ok := aMap[key]
                                if ok && otherCond {
<
                        Become: >
                                if err := e(); err != nil {

                                if _, ok := aMap[key]; ok && otherCond {
<
                        This works in both directions.

                                                 *(gopher-return)* *gopher-;r*
;r                      Generate a return statement with the appropiate zero
                        values for the current function.

                                                    *(gopher-err)* *gopher-;e*
;e                      Generate a return statement with the appropiate zero
                        values for the current function, wrapped in an 'err !=
                        nil' check.

==============================================================================
FILETYPES                                                   *gopher-filetypes*

                                                                       *ft-go*
go~

        The go filetype sets the following settings:

                'equalprg'     `gofmt 2>/dev/null || cat /dev/stdin`
                                A simple/native way to format code with gofmt
                                while ignoring errors. Use ALE or Syntastic
                                for a more advances experience.

                                Note: goimports is not used here as it can't
                                operate over a partial file (e.g a line or
                                function). See the snippet in the README on
                                how to format with goimports on write.

                                                          *g:gopher_highlight*
        The `g:gopher_highlight` setting controls various options for the go
        syntax highlighting. It's a list which can contain any combination of
        the following items:

                complex                Highlight complex numbers; disabled by
                                       default as it's fairly slow and not
                                       frequently used.
                string-fmt             Highlight fmt formatting specifiers.
                string-spell           Enable spell checking in strings.

        Options to control folding:

                fold-block             All `{` .. `}` blocks.
                fold-comment           Any comment except the package comment.
                fold-import            `import` block.
                fold-pkg-comment       The package comment.
                fold-varconst          `var` and `const` blocks.

        The default is `['string-spell', 'string-fmt']`

        Note: you will need to reload the syntax file with `:set syntax=go`
        for changes to take effect when changing it at runtime.

                                                             *gopher-compiler*
        Several compilers are supported; you can select one with the
        |:compiler| command.

                go                      |'makeprg'| defaults to `go install`
                                        but `go build` or `go run` also work.
                gotest                  `go test`
                golint                  `golangci-lint`

                                                    *g:gopher_install_package*
        Can be set to a package name to install with |:make|; default is to
        use the current directory. This is especially useful if the main
        package is a `./cmd/proj` subpackage. You typically want to set this
        per-project with an |autocmd|:
>
            autocmd BufReadPre /home/martin/code/proj/*.go
                        \ let g:gopher_install_package = 'example.com/proj/cmd/proj'
<
        This ensures that the `example.com/proj/cmd/proj` package is installed
        with |:make| regardless of the current directory or file you have
        open. This is only used by the go |compiler|, not gotest or golint.

        Note: run |:e| to reload after changing this during runtime.


                                                                    *ft-gomod*
gomod~
                        go.mod file; there are no options.

                                                                *ft-gopresent*
gopresent~
                        go present slide:
                        https://godoc.org/golang.org/x/tools/present

                        Only highlights the basics and adds |gopher-[[| and
                        |gopher-]]| motions.

                                                       *ft-gotext* *ft-gohtml*
gotext gohtml~
                        text/template and html/template. Automatically applied
                        to files ending with the `.gotext` and `.gohtml`.
                        gohtml loads the standard html syntax highlighting,
                        but they are otherwise identical.

==============================================================================
COMMANDS                                                     *gopher-commands*

:GoSetup                                                            *:GoSetup*
        Make sure all dependent tools are downloaded and compiled. Normally
        this is done automatically after you start Vim so it's not required to
        manually run it.
        It's may still be useful to run as post-install/update hook, so you
        don't have to wait for stuff to install or update on first usage.

:GoDiag[!]                                                           *:GoDiag*
        Print diagnostic information. Also see |g:gopher_debug|.

        When the [!] is included the output will be copied to the clipboard
        (|quote+| register).

:GoCoverage [flags]                                              *:GoCoverage*
        Run `go test -cover` and highlight lines reported as covered and
        uncovered.

        [flags] are passed to the `go test` command; there are two special
        flags:

        clear        Clear all existing highlighting.
        toggle       Toggle display of highlighting.

                                 *hl-goCoverageCovered* *hl-goCoverageUncover*
        Note: it's impossible to highlight the background with a colour that
        is guaranteed to work well with all colour schemes. The default is to
        use something that works well with the default one and – hopefully –
        most common ones.

        Override the goCoverageCovered and/or goCoverageUncover highlight
        groups if the defaults don't work well for you.
>
                augroup my-gopher-coverage
                        au!
                        au Syntax go hi goCoverageCovered guibg=blue
                        au Syntax go hi goCoverageUncover guibg=brown
                augroup end
<
:GoGuru [flags] {command}                                            *:GoGuru*
        Run a `guru` command.

        {command} can be any of:

                callees     Show targets of function call.
                            This is useful especially if the function call is
                            an interface.
                callers     Show locations where the current function is
                            called from.
                callstack   Show path from callgraph root to the current
                            function.
                definition  Show declaration of identifier.
                describe    Show detailed description of selected syntax.
                freevars    Show free variables of selection, meaning
                            variables which are referenced but not defined
                            within the selection.
                implements  Show which interfaces a type of method implements.
                peers       Show locations where data is sent or read to/from
                            a channel.
                pointsto    Show variables the selected pointer may point to.
                referrers   Show all references to an identifier.
                what        Basic information about the selected syntax.
                whicherrs   Get possible values of an error variable.

        See the guru manual for a full description and usage examples:
        http://golang.org/s/using-guru

        [flags] are passed to the `guru` command; commons ones are:

                -reflect      Analyse reflection soundly (slow).
                -scope [pkg]  Comma-separated list of packages the analysis
                              should be limited to; overrides
                              |g:gopher_guru_scope|.

        *g:gopher_guru_scope* = `gopher#go#package()`
                Limit the analysis to these package, comma-separated list.

                Some guru commands are slow and expensive, so for reasons of
                efficiency the analysis is limited to a limited set of
                packages.
                The default is to use the package the current buffer belongs
                to; but this may not always be correct. For example for the
                file example.com/pkg/a/a.go the scope will be set to
                example.com/pkg/a, but you probably want example.com/pkg.

                With this option a more extensive scope can be given. Some
                examples:

                        golang.org/x/tools/cmd/guru A single package
                        golang.org/x/tools/...      All packages under dir
                        ...                         The entire workspace.

                You can set it from an |:autocmd|: >
                        autocmd BufRead /code/example.com/*.go
                                let g:gopher_guru_scope = 'example.com/pkg'
<
:GoImport [flags]                                                  *:GoImport*
        Add, modify, or remove imports.

        All packages in [flags] will be added. A package can be given as
        `pkg:alias`. Imports can be removed by using `-rm pkg`

:GoRename [new-ident]                                              *:GoRename*
        Rename the identifier under the cursor.

        if [new-ident] is omitted the new identifier is based on the following
        rules:

          - All caps identifiers are CamelCased (FOO_BAR -> FooBar).
          - Exported are unexported (FooBar -> fooBar).
          - Unexported are exported (fooBar -> FooBar).

        Tab completion includes the exported and unexported version.

        Note: this only works for packages in GOPATH at the moment due to
        limitations in `gorename`: https://github.com/golang/go/issues/27571

        *g:gopher_gorename_flags* = `[]`
                List of flags to add to the `gorename` command.

:{range}GoTags [flags]                                               *:GoTags*
        Add, modify, or remove struct tags. Will only apply to the fields in
        {range} if it's given, or applied to all fields in the struct if it's
        omitted.

        All tags in [flags] will be added. A tag can be followed by a `,`
        (comma) and an option to add the option, or set to a

        Tags can be removed by using `-rm tag`; options can be removed by
        using `-rm tag,opt`

        The value of |g:gopher_tag_default| is used if no [flags] is given.

        Examples: >

                :GoTags json                  Add tag "json"
                :GoTags json,omitempty        Add tag with omitempty, or add
                                              omitempty for fields where it
                                              already exists.
                :GoTags json,omitempty db     Add two tags

                :GoTags -rm json              Remove a tag
                :GoTags -rm json,omitempty    Remove the omitempty option
                :GoTags -rm json -rm db       Remove two tags
                :GoTags -rm                   Remove all tags

                :GoAddTags sometag=foo        Set the tag sometag to the
                                              string foo.

                :GoTags json -rm yaml         Combine add and rm
<
        *g:gopher_tag_default* = `'json'`
                Default tag for |:GoTags| when no parameters are given. Can be
                any valid set of arguments for |:GoTags| (for example
                `json,omitempty -rm yaml`).

        *g:gopher_tag_transform* = `'snakecase'`
                Transform the struct field name when adding a tag. Supported
                values:

                        snakecase        FooBar -> foo_bar
                        camelcase        FooBar -> fooBar
                        lispcase         FooBar -> foo-bar
                        pascalcase       fooBar -> FooBar
                        keep             No transformation; FooBar -> FooBar

==============================================================================
OPTIONS                                                       *gopher-options*

General options or options that affect many commands; options specific for
just a command are documented in the command.

*g:gopher_build_tags* = `[]`
        List of build tags added to all commands that support it.

*g:gopher_build_flags* = `['-tags'] + g:gopher_build_tags`
        List of flags to add to all `go` commands.

*g:gopher_debug* = `[]`
        List of debugging options:

        commands    Records all shell commands; use |:GoDiag| or
                    `gopher#system#history()` to view.

*gopher_override_vimgo* = (undefined)
        Override vim-go; this removes all vim-go commands, autocommands,
        unsets b:did_ftplugin and b:current_syntax, and removes vim-go from
        'runtimepath'.

        This is only recommended for testing/experimenting. This will break if
        vim-go adds new commands or autocmds.


vim:tw=78:ts=8:sts=8:sw=8:ft=help:norl:expandtab
